name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.20", "1.21"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./pkg/... ./tests/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build binary
        run: go build -v -o simgo cmd/simgo/main.go

      - name: Test examples compilation
        run: |
          ./simgo -input examples/basic_swap.go -output basic_swap.simf
          echo "Basic swap compiled successfully"
          if [ -f "examples/atomic_swap.go" ]; then
            ./simgo -input examples/atomic_swap.go -output atomic_swap.simf
            echo "Atomic swap compiled successfully"
          fi

      - name: Validate generated SimplicityHL
        run: |
          echo "Checking generated .simf files..."
          for file in *.simf; do
            if [ -f "$file" ]; then
              echo "Generated: $file"
              if grep -q "mod witness" "$file" && grep -q "mod param" "$file" && grep -q "fn main" "$file"; then
                echo "✓ $file appears to be valid SimplicityHL"
              else
                echo "✗ $file may be invalid SimplicityHL"
                exit 1
              fi
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: simgo-binary
          path: simgo

      - name: Upload generated SimplicityHL files
        uses: actions/upload-artifact@v3
        with:
          name: simplicity-examples
          path: "*.simf"

  release:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build release binaries
        run: |
          mkdir -p release
          # Linux
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o release/simgo-linux-amd64 cmd/simgo/main.go
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-w -s" -o release/simgo-linux-arm64 cmd/simgo/main.go
          # macOS
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o release/simgo-darwin-amd64 cmd/simgo/main.go
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o release/simgo-darwin-arm64 cmd/simgo/main.go
          # Windows
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o release/simgo-windows-amd64.exe cmd/simgo/main.go

      - name: Test release binaries
        run: |
          ./release/simgo-linux-amd64 -input examples/basic_swap.go -output test-release.simf
          echo "✓ Linux binary works"
          rm -f test-release.simf

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
          body: |
            ## go-simplicity Release

            This release includes binaries for multiple platforms and improvements to the Go to SimplicityHL transpiler.

            ### Features
            - Go to SimplicityHL transpilation
            - Compile-time expression evaluation
            - Support for basic smart contract patterns
            - Cross-platform binaries

            ### Usage
            ```bash
            ./simgo -input your_contract.go -output contract.simf
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
